- Back
    - SRC
        - Pasta - Controllers
        - Pasta - Connect
        - Arquivo - Routes.js
- Banco
    - banco.sql
        - Digitar o sql aqui dentro

- Front
    - Páginas HTML, CSS 
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
// Dependencias a serem instaladas:
// npm init
// npm i express cors mysql
// npm install body-parser - fas a analise dos dados de entrada contidos
// npm install nodemon -g
// disponibilizando as propriedades em req.body

- Back

    - Arquivo - server.js (fora da pata SRC)
// Dependencias framework's
const express = require('express')
const cors = require('cors')
const routes = require('./src/routes')

// Configuraçoes de saida para front
const app = express()
app.use(express.json())
app.use(cors())
app.use(routes)

app.listen(3000, () => {
    console.log("Servidor rodando na porta 3000")
})

    - Pasta - SRC
        - Pasta - Connect
#connect.js
// Chamando as dependências
const mysql = require('mysql')

// Configuração da conexão com o Banco de Dados
const con = mysql.createConnection({
    user: 'root',
    host: 'localhost',
    database: 'autoescola'
});

module.exports = {con}


        - Pasta - Controllers
#alunos.js
// Chamando as dependências
const con = require('../connect/connect').con;

const read = (req, res) => {
    con.query('SELECT * FROM alunos', (err, result) => {
        if (err){
            res.status(500).json(err);
        }else{
            res.json(result)
        }
    })
}

module.exports = {
    read
}

#aulas.js
// Chamando as dependências
const con = require('../connect/connect').con;

const read = (req, res) => {
    con.query('SELECT * FROM aulas', (err, result) => {
        if (err){
            res.status(500).json(err);
        }else{
            res.json(result)
        }
    })
}

module.exports = {
    read
}

#instrutores.js
// Chamando as dependências
const con = require('../connect/connect').con;

const read = (req, res) => {
    con.query('SELECT * FROM instrutores', (err, result) => {
        if (err){
            res.status(500).json(err);
        }else{
            res.json(result)
        }
    })
}

module.exports = {
    read
}


        - Arquivo - Routes.js
// Dependências para funcionar
const express = require('express')
const router = express.Router();

const alunos = require('./controllers/alunos');
const aulas = require('./controllers/aulas');
const instrutores = require('./controllers/instrutores');

// Rota (Endpoint) de teste
const teste = (req, res)=>{
    res.json("API Loja TI respondendo com sucesso!");
}

router.get('/', teste);
router.get('/alunos', alunos.read);
router.get('/instrutores', instrutores.read);
router.get('/aulas', aulas.read);


module.exports = router;

- Banco
    - banco.sql
CREATE DATABASE autoescola;
USE autoescola;
-- Criação das tabelas

-- Tabela: Alunos
CREATE TABLE Alunos (
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    telefone VARCHAR(15),
    data_nascimento DATE NOT NULL,
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela: Instrutores
CREATE TABLE Instrutores (
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    telefone VARCHAR(15),
    categoria_cnh VARCHAR(50) NOT NULL,
    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela: Aulas
CREATE TABLE Aulas (
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    data_aula DATETIME NOT NULL,
    aluno_id INTEGER NOT NULL,
    instrutor_id INTEGER NOT NULL,
    tipo VARCHAR(50) NOT NULL,
    observacoes TEXT,
    FOREIGN KEY (aluno_id) REFERENCES Alunos(id),
    FOREIGN KEY (instrutor_id) REFERENCES Instrutores(id)
);

-- Inserts para a tabela Alunos
INSERT INTO Alunos (nome, email, telefone, data_nascimento) VALUES
('Maria Oliveira', 'maria.oliveira@example.com', '11987654321', '2000-05-15'),
('João Silva', 'joao.silva@example.com', '11923456789', '1995-08-25'),
('Ana Costa', 'ana.costa@example.com', '11934567890', '1990-12-10');

-- Inserts para a tabela Instrutores
INSERT INTO Instrutores (nome, email, telefone, categoria_cnh) VALUES
('Carlos Santos', 'carlos.santos@example.com', '11912345678', 'Categoria B'),
('Fernanda Lima', 'fernanda.lima@example.com', '11987654321', 'Categoria A'),
('Roberto Almeida', 'roberto.almeida@example.com', '11911223344', 'Categoria C');

-- Inserts para a tabela Aulas
INSERT INTO Aulas (data_aula, aluno_id, instrutor_id, tipo, observacoes) VALUES
('2024-09-05 10:00:00', 1, 1, 'prática', 'Iniciar com manobras básicas.'),
('2024-09-06 14:00:00', 2, 2, 'teórica', 'Revisão das regras de trânsito.'),
('2024-09-07 09:00:00', 3, 3, 'prática', 'Aula de estacionamento e baliza.');

- Front
    - Páginas HTML, CSS 
